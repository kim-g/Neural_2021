import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras.layers import Dense,Dropout
from keras.callbacks import EarlyStopping
early_spotting_monitor = EarlyStopping(patience=2)
from keras.layers import Input, Dense
from keras.models import Model       
from keras.layers.merge import concatenate
from random import randint

#генератор

from random import randint
import numpy as np
xy = set()
while len(xy) < 2000:
  a = (randint(-2000, 2000), randint(-2000, 2000))
  if a[1] == a[0]*1.5-3 or a[1] == a[0]*-0.5+2:
     continue
  xy.add(a)#генерируем значения кординат
xy = np.array(list(xy))
answer = []
for x in xy :
   if -2<=x[1]<=0 :
       x_in_equation = ((x[1]+2)*0.5)**0.5
       if x_in_equation >= 0:
           if x[0] >= x_in_equation:
               answer.append(1)
           else:
               answer.append(0)
       if x_in_equation < 0:
           if x[0] > x_in_equation:
               answer.append(1)
           else:
               answer.append(0)
   else:
       answer.append(0)
answer=np.array(answer)#генерируем ответы исходя из xy(всё от 13 строки)

#нс

Inp = Input(shape=(xy.shape[1],))
hidden11 = Dense(1, activation='linear')(Inp)    
hidden11 = Dense(1, activation='relu')(Inp)
merge1 = concatenate([hidden11])
output = Dense(shape=answer.shape[1],activation="softmax")(hidden12)
#(ошибка на строку выше) ругается :
#IndexError: tuple index out of range
model = Model(inputs=Inp, outputs=output)#создаём стопку слоёв из 2-ух слоёв с 2-мя входами из которых один слой с разными активационными функциями
model.compile(loss='mean_squared_error', optimizer = keras.optimizers.Adam(0.1))# модель нс
history = model.fit( x=xy, y=answer, epochs = 10, verbose=False,callbacks=[early_spotting_monitor])#обучаем
return model
plt.plot(history.history['loss'])
plt.grid(True)
plt.show#выводим график
print(model.get_weights())#выводим веса

inp = list(map(int, input().split()))
for num1, num2 in zip(inp[::2], inp[1::2]): #ввод значений
   print(np.round(model.predict(np.array([[num2 ,num1]]))),model.predict(np.array([[num2 ,num1]])))
