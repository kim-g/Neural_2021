import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras.layers import Dense,Dropout
from random import randint

#генератор

xy=set()
while len(xy) < 2000:
  a = (randint(-2000, 2000), randint(-2000, 2000))
  b = (randint(-100, 100), randint(-100, 100))
  xy.add(b)
  xy.add(a)#генерируем значения кординат
answer1=[]#ответы для 1нс
answer2=[]#ответы для 2нс
for x in xy:
   y=1
   if x[1]>y:
      answer1.append(0)
   if x[1]<=y:
      answer1.append(1)#ответы для 1 нс
   if x[1]>-3:
       x_in_equation = ((x[1]+2)/0.5)**0.5
       if x_in_equation >= 0:
           if x[0] <= x_in_equation:
               answer2.append(1)
           if x[0] > x_in_equation:
               answer2.append(0)
       if x_in_equation < 0:
           if x[0] >= x_in_equation:
               answer2.append(1)
           if x[0] < x_in_equation:
               answer2.append(0)
   else:
       answer2.append(0)#ответы для нс
xy = np.array(list(xy))
answer1 = np.array(answer1)
answer2 = np.array(answer2)

#1нс

model1=keras.Sequential([
   Dense(1, input_shape=(2,),activation='sigmoid')
])#создаём стопку слоёв из одного слоя с 2-мя входами
model1.compile(loss='mean_squared_error', optimizer = keras.optimizers.Adam(0.1))#настраиваем модель нс
history1 = model1.fit( x=xy, y=answer1, epochs = 800, verbose=False)#обучаем
plt.plot(history1.history['loss'])
plt.grid(True)
plt.show#выводим график
print(model1.get_weights())#выводим веса

#2нс

model2=keras.Sequential([
   Dense(2, input_shape=(2,),activation='sigmoid'),
   Dense(1,activation='sigmoid')
])#создаём стопку слоёв из 2-ух слоёв с 2-мя входами
model2.compile(loss='mean_squared_error', optimizer = keras.optimizers.Adam(0.1))#настраиваем модель нс
history2 = model2.fit( x=xy, y=answer2, epochs = 1000, verbose=False)#обучаем
plt.plot(history2.history['loss'])
plt.grid(True)
plt.show#выводим график
print(model2.get_weights())#выводим веса

#вывод

inp = list(map(int, input().split()))
for num1, num2 in zip(inp[::2], inp[1::2]): #ввод значений
   n1 = np.round(model1.predict(np.array([[num2 ,num1]])))
   n2 = np.round(model2.predict(np.array([[num2 ,num1]])))
   if n1+n2==2:
      print(1)
   else:
      print(0)#вывод относительно вывода 2-ух нс
